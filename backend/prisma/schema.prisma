generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  fingerprint String?
}

model ComputerPart {
  id         Int      @id @default(autoincrement())
  name       String
  parttype   String
  price      Float

  computersAsCpu Computer[] @relation("CPU")
  computersAsGpu Computer[] @relation("GPU")
  computersAsMotherboard Computer[] @relation("Motherboard")
  computersAsPsu Computer[] @relation("PSU")
  computersAsCooler Computer[] @relation("Cooler")
  computersAsRam Computer[] @relation("RAM")
}

model Computer {
  id                Int            @id @default(autoincrement())
  name              String
  performance       String
  urls              ComputerImages[]
  cpuId             Int?
  gpuId             Int?
  ramId             Int?
  motherboardId     Int?
  psuId             Int?
  coolerId          Int?


  cpu           ComputerPart?  @relation("CPU", fields: [cpuId], references: [id])
  gpu           ComputerPart?  @relation("GPU", fields: [gpuId], references: [id])
  ram           ComputerPart?  @relation("RAM", fields: [ramId], references: [id])
  motherboard   ComputerPart?  @relation("Motherboard", fields: [motherboardId], references: [id])
  psu           ComputerPart?  @relation("PSU", fields: [psuId], references: [id])
  cooler        ComputerPart?  @relation("Cooler", fields: [coolerId], references: [id])

}

model ComputerImages {
  id Int @id @default(autoincrement())
  url String
  computerId Int
  computer Computer @relation(fields: [computerId], references: [id])
}
